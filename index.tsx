import { Hono } from "hono";
import { serveStatic } from "hono/bun";
import type { FC } from "hono/jsx";
import { html } from "hono/html";
import config from "./zosite.json";

const app = new Hono();

const homepageCSS = `
  body {
    font-family: 'Playfair Display', serif;
    background-color: #e6d7c3;
    margin: 0;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .text {
    font-size: 2rem;
    color: black;
  }
`;

const readingCSS = `
  body {
    font-family: 'Playfair Display', serif;
    background-color: #f5f1eb;
    margin: 0;
    padding: 2rem;
    line-height: 1.7;
    color: #2c2c2c;
  }
  
  .reading-container {
    max-width: 65ch;
    margin: 0 auto;
    padding: 2rem 0;
  }
  
  h1 {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    color: #1a1a1a;
    text-align: center;
  }
  
  p {
    margin-bottom: 1.5rem;
    font-size: 1.1rem;
  }
  
  ul {
    list-style: none;
    padding: 0;
  }
  
  li {
    margin-bottom: 1rem;
    padding: 0.5rem 0;
  }
  
  a {
    color: #8b4513;
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-bottom 0.2s ease;
  }
  
  a:hover {
    border-bottom: 1px solid #8b4513;
  }
  
  em {
    font-style: italic;
    color: #666;
  }
  
  .back-link {
    display: block;
    text-align: center;
    margin-top: 3rem;
    font-size: 1rem;
  }
`;

const Layout: FC<{ children: any; isReading?: boolean }> = (props) => {
  const cssToUse = props.isReading ? readingCSS : homepageCSS;
  
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="robots" content="noindex, nofollow" />
        <title>{config.name}</title>
        <link rel="icon" type="image/png" href="/favicon.ico" />
        <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap" rel="stylesheet" />
        <style dangerouslySetInnerHTML={{ __html: cssToUse }} />
        {props.isReading && (
          <script src="https://cdn.jsdelivr.net/npm/marked@11.1.1/marked.min.js"></script>
        )}
      </head>
      <body>{props.children}</body>
    </html>
  );
};

// Serve favicon
app.get('/favicon.ico', serveStatic({ path: './res/happymac.png' }));

// Serve all files from res/ directory
app.use('/res/*', serveStatic({ root: './' }));

app.get("/", (c) => {
  return c.html(
    <Layout>
      <div class="text">Rob's public stuff</div>
    </Layout>,
  );
});

app.get("/bibliography", async (c) => {
  try {
    const file = Bun.file('./res/bibliography.md');
    const content = await file.text();
    
    return c.html(
      <Layout isReading={true}>
        <div class="reading-container">
          <div id="markdown-content"></div>
          <a href="/" class="back-link">← Back to home</a>
        </div>
        <script dangerouslySetInnerHTML={{
          __html: `
            const markdown = ${JSON.stringify(content)};
            document.getElementById('markdown-content').innerHTML = marked.parse(markdown);
          `
        }} />
      </Layout>,
    );
  } catch (error) {
    return c.text('Bibliography not found', 404);
  }
});

app.get("/pale-king", async (c) => {
  try {
    const file = Bun.file('./res/DFW-Pale-King-19.md');
    const content = await file.text();
    
    return c.html(
      <Layout isReading={true}>
        <div class="reading-container">
          <div id="markdown-content"></div>
          <a href="/" class="back-link">← Back to home</a>
        </div>
        <script dangerouslySetInnerHTML={{
          __html: `
            const markdown = ${JSON.stringify(content)};
            document.getElementById('markdown-content').innerHTML = marked.parse(markdown);
          `
        }} />
      </Layout>,
    );
  } catch (error) {
    return c.text('Pale King excerpt not found', 404);
  }
});

app.get("/pale-king-22", async (c) => {
  try {
    const file = Bun.file('./res/Wallace--The-Pale-King-Chapter-22.md');
    const content = await file.text();
    
    return c.html(
      <Layout isReading={true}>
        <div class="reading-container">
          <div id="markdown-content"></div>
          <a href="/" class="back-link">← Back to home</a>
        </div>
        <script dangerouslySetInnerHTML={{
          __html: `
            const markdown = ${JSON.stringify(content)};
            document.getElementById('markdown-content').innerHTML = marked.parse(markdown);
          `
        }} />
      </Layout>,
    );
  } catch (error) {
    return c.text('Pale King Chapter 22 not found', 404);
  }
});

/**
 * This default export is AUTOGENERATED. DO NOT CHANGE THIS EXPORT.
 * The automatically managed development and deployment system relies on this config being respected in this way.
 */
export default {
  fetch: app.fetch,
  port:
    process.env.NODE_ENV === "production"
      ? (config.publish?.published_port ?? config.local_port)
      : config.local_port,
};

